library(gridExtra)
grid.arrange(l, nrow=1)
head(m)
knitr::opts_chunk$set(echo = TRUE)
cts <- as.matrix(read.csv("ballgown/gene_count_matrix.csv",
header=T, row.names="gene_id"))
head(cts)
coldata <- as.matrix(read.csv("ExperimentalDesign.csv",
header=T,
row.names="sample_name"))
print(coldata)
coldata <- as.matrix(read.csv("ExperimentalDesign.csv",
header=T,
row.names="sample_name"))
print(coldata)
#below should be true
all(rownames(coldata) %in% colnames(cts))
cts <- cts[, rownames(coldata)]
#below should be true
all(rownames(coldata) == colnames(cts))
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
if (!require("DESeq2")) {
source("https://bioconductor.org/biocLite.R")
biocLite("DESeq2")
library("DESeq2")
}
if (!require("ggplot2")) {
install.packages("ggplot2")
library("ggplot2")
}
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design = ~ condition)
dds
dds <- DESeq(dds)
res <- results(dds)
res
vsd <- vst(dds, blind=FALSE)
if (!require("pheatmap")) {
source("https://bioconductor.org/biocLite.R")
biocLite("pheatmap")
library("pheatmap")
}
if (!require("RColorBrewer")) {
install.packages("RColorBrewer")
library("RColorBrewer")
}
#calculate the distributions between the samples
sampleDists <- dist(t(assay(vsd)))
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- paste(vsd$condition)
#colnames(sampleDistMatrix) <- NULL
color <- colorRampPalette(rev(brewer.pal(9,"Blues")))(255)
pheatmap(sampleDistMatrix,
clustering_distance_rows = sampleDists,
clustering_distance_cols = sampleDists,
col=color)
plotPCA(vsd, intgroup = c("condition")) + geom_text(aes(label=name), vjust=1, position = position_dodge2(width=2))
if (!require("vidger")) {
source("https://bioconductor.org/biocLite.R")
biocLite("vidger")
library("vidger")
}
vsBoxPlot(dds, d.factor="condition",
type="deseq",
title=FALSE,
legend=TRUE,
aes="violin")
vsScatterMatrix(dds,
type="deseq",
d.factor="condition",
grid=TRUE,
title=FALSE
)
vsMAPlot(y="Positive", x="Negative",
data=dds,
type="deseq",
d.factor="condition",
padj=0.05,
lfc=2)
vsMAPlot(y="Short", x="Long",
data=dds,
type="deseq",
d.factor="condition",
padj=0.05,
lfc=2)
resOrdered <- res[order(res$pvalue),]
summary(resOrdered)
m <- as.matrix(res)
m
protein_blast_hits = read.csv("merged_protein_hits.tab", header=FALSE)
protein_blast_hits
protein_blast_hits = read.csv("merged_protein_hits.tab", header=FALSE, sep="\t")
protein_blast_hits
colnames(protein_blast_hits) <- c("gene_id", "protein_hit")
protein_blast_hits
head(protein_blast_hits)
head(m)
m$gene_id <- rownames(m)
head(m)
m
m <- as.matrix(res)
df <- cbind(rownames(d), data.frame(m, row.names=NULL))
df <- cbind(rownames(m), data.frame(m, row.names=NULL))
head(df)
colnames(df)[1] <- "gene_id"
head(df)
?cbind
df_p <- merge(df, protein_blast_hits, all=T, by="gene_id")
head(df_p)
df_p
colnames(nucleotide_blast_hits) <- c("gene_id", "nucl_hit")
nucleotide_blast_hits <- read.csv("merged_nucleotide_hits.tab", header=FALSE, sep="\t")
colnames(nucleotide_blast_hits) <- c("gene_id", "nucl_hit")
df_p <- merge(df, protein_blast_hits, nucleotide_blast_hits, all=T, by="gene_id")
df_pn <- merge(df_p, nucleotide_blast_hits, all=T, by="gene_id")
df_pn
head(df_pn)
if (!require("biomaRt")) {
source("https://bioconductor.org/biocLite.R")
biocLite("biomaRt")
library("biomaRt")
}
ensembl <- useMart("ENSEMBL_MART_ENSEMBL",
dataset="oaries_gene_ensembl")
annotation <- getBM(attributes = c("ensemble_gene_id", "description", "wikigene_name", "wikigene_description"),
filters = "ensemble_gene_id",
values = df_pn$protein_hit,
mart=ensembl)
annotation <- getBM(attributes = c("ensemble_gene_id", "description", "wikigene_name", "wikigene_description"),
filters = "ensembl_gene_id",
values = df_pn$protein_hit,
mart=ensembl)
annotation <- getBM(attributes = c("ensembl_gene_id", "description", "wikigene_name", "wikigene_description"),
filters = "ensembl_gene_id",
values = df_pn$protein_hit,
mart=ensembl)
annotation
head(df_pn$protein_hit)
proteins <- sub("*\\.[0-9]", "", df_pn$protein_hit)
proteins
proteins <- na.rm(proteins)
proteins <- sub("*\\.[0-9]", "", df_pn$protein_hit[!is.na(df_pn$protein_hit)])
proteins
annotation <- getBM(attributes = c("ensembl_gene_id", "description", "wikigene_name", "wikigene_description"),
filters = "ensembl_gene_id",
values = head(proteins),
mart=ensembl)
annotation
annotation <- getBM(attributes = c("ensembl_gene_id", "description", "wikigene_name", "wikigene_description"),
filters = "accession",
values = head(proteins),
mart=ensembl)
listFilters
listFilters()
listFilters(ensembl)
annotation <- getBM(attributes = c("ensembl_gene_id", "description", "wikigene_name", "wikigene_description"),
filters = "refseq_mrna",
values = head(proteins),
mart=ensembl)
annotation
getBM(attributes = c("ensembl_gene_id", "description", "wikigene_name", "wikigene_description"),
filters = "refseq_mrna",
values = head(proteins),
mart=ensembl)
getBM(attributes = c("ensembl_gene_id","refseq_mrna", "description", "wikigene_name", "wikigene_description"),
filters = "refseq_mrna",
values = head(proteins),
mart=ensembl)
head(proteins)
head(proteins,20)
getBM(attributes = c("ensembl_gene_id","refseq_mrna", "description", "wikigene_name", "wikigene_description"),
filters = "refseq_mrna",
values = head(proteins,20),
mart=ensembl)
getBM(attributes = c("ensembl_gene_id","refseq_mrna", "description", "wikigene_name", "wikigene_description"),
filters = "refseq_mrna",
values = head(proteins,30),
mart=ensembl)
listMarts()
listDatasets()
listDatasets(useMart("ENSEMBL_MART_ENSEMBL"))
getwd()
knitr::opts_chunk$set(echo = TRUE)
coldata <- as.matrix(read.csv("ExperimentalDesign.csv",
header=T,
row.names="sample_name"))
print(coldata)
cts <- as.matrix(read.csv("ballgown/transcript_count_matrix.csv",
header=T, row.names="gene_id"))
cts <- as.matrix(read.csv("ballgown/transcript_count_matrix.csv",
header=T, row.names="transcript_id"))
head(cts)
#below should be true
all(rownames(coldata) %in% colnames(cts))
cts <- cts[, rownames(coldata)]
#below should be true
all(rownames(coldata) == colnames(cts))
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
if (!require("DESeq2")) {
source("https://bioconductor.org/biocLite.R")
biocLite("DESeq2")
library("DESeq2")
}
if (!require("ggplot2")) {
install.packages("ggplot2")
library("ggplot2")
}
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design = ~ condition)
dds
dds <- DESeq(dds)
dds <- DESeq(dds)
res <- results(dds)
res
vsd <- vst(dds, blind=FALSE)
if (!require("pheatmap")) {
source("https://bioconductor.org/biocLite.R")
biocLite("pheatmap")
library("pheatmap")
}
if (!require("RColorBrewer")) {
install.packages("RColorBrewer")
library("RColorBrewer")
}
#calculate the distributions between the samples
sampleDists <- dist(t(assay(vsd)))
#colnames(sampleDistMatrix) <- NULL
color <- colorRampPalette(rev(brewer.pal(9,"Blues")))(255)
pheatmap(sampleDistMatrix,
clustering_distance_rows = sampleDists,
clustering_distance_cols = sampleDists,
col=color)
#calculate the distributions between the samples
sampleDists <- dist(t(assay(vsd)))
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- paste(vsd$condition)
#colnames(sampleDistMatrix) <- NULL
color <- colorRampPalette(rev(brewer.pal(9,"Blues")))(255)
pheatmap(sampleDistMatrix,
clustering_distance_rows = sampleDists,
clustering_distance_cols = sampleDists,
col=color)
plotPCA(vsd, intgroup = c("condition")) + geom_text(aes(label=name), vjust=1, position = position_dodge2(width=2))
m <- as.matrix(res)
m
rownames(res)
ercc_genes <- df[grep(pattern="ERCC", x=rownames(res)),]
ercc_genes <- res[grep(pattern="ERCC", x=rownames(res)),]
ercc_genes
write.csv(ercc_genes, "ercc_expression_results.csv")
knitr::opts_chunk$set(echo = TRUE)
#load the raw count data
cts <- as.matrix("./ballgown/transcript_count_matrix.csv",
header=TRUE,
sep = "\t")
head(cts)
#load the raw count data
cts <- as.matrix(read.csv("./ballgown/transcript_count_matrix.csv",
header=TRUE,
sep = "\t"))
cts
#load the raw count data
cts <- read.matrix("./ballgown/transcript_count_matrix.csv",
header=TRUE,
sep = "\t")
#load the raw count data
cts <- read.table("./ballgown/transcript_count_matrix.csv",
header=TRUE,
sep = "\t")
head(cts)
#load the raw count data
cts <- read.table("./ballgown/transcript_count_matrix.csv",
head(cts)
header=TRUE,
sep = ",")
#load the raw count data
cts <- read.table("./ballgown/transcript_count_matrix.csv",
header=TRUE,
sep = ",")
head(cts)
#load the raw count data
cts <- as.matrix(read.csv("./ballgown/transcript_count_matrix.csv",
header=TRUE,
sep = ",", row.names="transcript_id"))
head(cts)
expr <- as.matrix(cbind(strsplit("MXA,MXB,MYA,MYB", ",")[[1]], strsplit("MX,MX,MY,MY",",")[[1]]))
colnames(expr) <- c("replicate", "sample")
rownames(expr) <- strsplit("MXA,MXB,MYA,MYB", ",")[[1]]
head(expr)
library("DESeq2")
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = expr,
design = ~ sample)
dds <- DESeq(dds)
dds <- DESeq(dds)
res <- results(dds)
library("RColorBrewer")
#transform the data
vsd <- vst(dds, blind=FALSE)
sampleDists <- dist(t(assay(vsd)))
rownames(sampleDistMatrix) <- paste(vsd$replicate, vsd$sample, sep="-")
color <- colorRampPalette(rev(brewer.pal(9,"Blues")))(255)
pheatmap(sampleDistMatrix,
clustering_distance_rows = sampleDists,
clustering_distance_cols = sampleDists,
col = color)
library("pheatmap")
#transform the data
vsd <- vst(dds, blind=FALSE)
sampleDists <- dist(t(assay(vsd)))
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- paste(vsd$replicate, vsd$sample, sep="-")
colnames(sampleDistMatrix) <- NULL
color <- colorRampPalette(rev(brewer.pal(9,"Blues")))(255)
pheatmap(sampleDistMatrix,
clustering_distance_rows = sampleDists,
clustering_distance_cols = sampleDists,
col = color)
plotPCA(vsd, intgroup = c("sample"))
library("vidger")
vsBoxPlot(dds, d.factor="sample",
type="deseq",
title=FALSE,
legend=TRUE,
aes="violin")
vsScatterMatrix(dds,
type="deseq",
d.factor="sample",
grid=TRUE,
title=FALSE
)
vsMAPlot(x=argsL$cond1, y=argsL$cond2,
data=dds,
type="deseq",
d.factor="sample",
padj=0.05,
lfc=2)
library("coseq")
set.seed(23513156)
set.seed(23513156)
coexpression <- coseq(dds, K=2:20, verbose=FALSE, alpha=0.05, iter=10000,nstart=100)
plot(coexpression, graphs="boxplots", conds=expr[,2], collapse_reps = "sum")
n <- merge(m, cts, all=T, by="row.names")
m <- merge(differential_expression_results, cluster_results, all=T, by="row.names")
differential_expression_results <- as.data.frame(results(dds))
cluster_results <- as.data.frame(clusterComp)
m <- merge(differential_expression_results, cluster_results, all=T, by="row.names")
n <- merge(m, cts, all=T, by="row.names")
head(n)
head(m)
head(cts)
rownames(m) <- m$Row.names
n <- merge(m, cts, all=T, by="row.names")
head(n)
setwd("H:/Projects/GBS_Athon/Coverage")
getwd()
cov <- read.table("all_coverage.txt",
header=false)
cov <- read.table("all_coverage.txt",
header=false)
getwd()
cov <- read.table("all_coverage.txt",
header=false)
setwd("H:/Projects/cbiotools/Bam")
cov <- read.table("all_coverage.txt",
header=T)
cov <- read.table("all_coverage.txt",
header=T)
getwd()
ls
cov <- read.table("./all_coverage.txt",
header=T)
getwd()
cov <- read.table("./all_coverage.txt",
header=T)
cov
library(ggplot2)
ggplot(cov, aes(x=Chrom, y=cov)) + geom_bar(stat="identity")
head(cov)
ggplot(cov, aes(x=Chrom, y=Cov)) + geom_bar(stat="identity")
ggplot(cov, aes(x=Chrom, y=Cov)) + geom_bar(stat="identity") + geom_facet(~Lane)
ggplot(cov, aes(x=Chrom, y=Cov)) + geom_bar(stat="identity") + facet_grid(. ~ Lane)
ggplot(cov, aes(x=Chrom, y=Cov)) + geom_bar(stat="identity") + facet_grid(Lane ~ .)
cov <- read.table("./all_coverage.txt",
header=T)
ggplot(cov, aes(x=Chrom, y=Cov)) + geom_bar(stat="identity") + facet_grid(Lane ~ .)
ggplot(cov, aes(x=Chrom, y=Cov), color="Lane") + geom_bar(stat="identity"))
ggplot(cov, aes(x=Chrom, y=Cov), color="Lane")) + geom_bar(stat="identity")
ggplot(cov, aes(x=Chrom, y=Cov)) + geom_bar(stat="identity")
ggplot(cov, aes(x=Chrom, y=Cov, fill=Lane)) + geom_bar(stat="identity")
ggplot(cov, aes(x=Chrom, y=Cov, fill=Lane)) + geom_bar(stat="identity", position="dodge")
ggplot(cov, aes(x=Chrom, y=Cov, fill=Lane)) + geom_bar(position="dodge")
ggplot(cov, aes(x=Chrom, y=Cov, fill=Lane)) + geom_bar(stat="identity",position="dodge")
cov
ggplot(cov, aes(x=Chrom, y=Cov, fill=Lane)) + geom_bar(stat="identity")
ggplot(cov, aes(x=Chrom, y=Cov, fill=Lane)) + geom_bar(stat="identity", position="dodge")
ggplot(cov, aes(x=Chrom, y=Cov, fill=Lane)) + geom_bar(stat="identity", position="dodge") + facet_grid(. ~ Lane)
ggplot(cov, aes(x=Chrom, y=Cov, fill=Lane)) + geom_bar(stat="identity", position="dodge") + facet_grid(Lane ~ .
)
ggplot(cov, aes(x=Chrom, y=Cov, fill=Lane)) + geom_bar(stat="identity", position="dodge") + facet_grid(Lane ~ .) + theme_bw()
ggplot(cov, aes(x=Chrom, y=Cov, fill=Lane)) + geom_bar(stat="identity", position="dodge") + facet_grid(Lane ~ .) + theme_bw()
ggplot(cov, aes(x=Chrom, y=Cov, fill=Lane)) + geom_bar(stat="identity",position="dodge")
ggplot(cov, aes(x=Chrom, y=Cov, fill=Lane)) + geom_bar(stat="identity", position="dodge") + facet_grid(Lane ~ .) + theme_bw()
ggplot(cov, aes(x=Chrom, y=Cov, fill=Lane)) + geom_bar(stat="identity",position="dodge") + theme_classic()
ggplot(cov, aes(x=Chrom, y=Cov, fill=Lane)) + geom_bar(stat="identity",position="dodge") + theme_light()
ggplot(cov, aes(x=Chrom, y=Cov, fill=Lane)) + geom_bar(stat="identity",position="dodge") + theme_light()
ggplot(cov, aes(x=Chrom, y=Cov, fill=Lane)) + geom_bar(stat="identity", position="dodge") + facet_grid(Lane ~ .) + theme_bw()
ggplot(cov, aes(x=Chrom, y=Cov, fill=Lane)) + geom_bar(stat="identity",position="dodge") + theme_light()
cov
knitr::opts_chunk$set(echo = TRUE)
cts <- as.matrix(read.csv("ballgown/transcript_count_matrix.csv",
header=T, row.names="transcript_id"))
head(cts)
coldata <- as.matrix(read.csv("ExperimentalDesign.csv",
header=T,
row.names="sample_name"))
print(coldata)
#below should be true
all(rownames(coldata) %in% colnames(cts))
cts <- cts[, rownames(coldata)]
#below should be true
all(rownames(coldata) == colnames(cts))
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
if (!require("DESeq2")) {
source("https://bioconductor.org/biocLite.R")
biocLite("DESeq2")
library("DESeq2")
}
if (!require("ggplot2")) {
install.packages("ggplot2")
library("ggplot2")
}
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design = ~ condition)
dds
dds <- DESeq(dds)
setwd("H:/Projects/JennyJuengel/GeneDiscoverExpression")
res <- results(dds)
res
vsd <- vst(dds, blind=FALSE)
if (!require("pheatmap")) {
source("https://bioconductor.org/biocLite.R")
biocLite("pheatmap")
library("pheatmap")
}
if (!require("RColorBrewer")) {
install.packages("RColorBrewer")
library("RColorBrewer")
}
#calculate the distributions between the samples
sampleDists <- dist(t(assay(vsd)))
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- paste(vsd$condition)
#colnames(sampleDistMatrix) <- NULL
color <- colorRampPalette(rev(brewer.pal(9,"Blues")))(255)
pheatmap(sampleDistMatrix,
clustering_distance_rows = sampleDists,
clustering_distance_cols = sampleDists,
col=color)
plotPCA(vsd, intgroup = c("condition")) + geom_text(aes(label=name), vjust=1, position = position_dodge2(width=2))
if (!require("vidger")) {
source("https://bioconductor.org/biocLite.R")
biocLite("vidger")
library("vidger")
}
vsBoxPlot(dds, d.factor="condition",
type="deseq",
title=FALSE,
legend=TRUE)
vsScatterMatrix(dds,
type="deseq",
d.factor="condition",
grid=TRUE,
title=FALSE
)
vsMAPlot(y="Long", x="Short",
data=dds,
type="deseq",
d.factor="condition",
padj=0.05,
lfc=2)
resOrdered <- res[order(res$pvalue),]
summary(resOrdered)
m <- merge(res, cts, all.x=TRUE, by="row.names")
colnames(m)[1] <- "transcript"
head(m)
transcript_proteins <- read.csv("diamond_transcripts_vs_proteins/merged_results.tab",
sep="\t", header=FALSE)
colnames(transcript_proteins) <- c("transcript", "protein")
#get rid of the ,* annotation
transcript_proteins$protein_query <- sub("*\\.[0-9]", "", transcript_proteins$protein)
n <- merge(m, transcript_proteins, all.x=TRUE, by="transcript")
head(n)
write.csv(as.matrix(n), "gene_expression_results.csv")
biocLite("biomaRt")
source("https://bioconductor.org/biocLite.R")
biocLite("biomaRt")
library("biomaRt")
ensembl <- useMart("ENSEMBL_MART_ENSEMBL")
ensembl <- useMart("ENSEMBL_MART_ENSEMBL")
oa_mart <- useMart("ENSEMBL_MART_ENSEMBL",
dataset="oaries_gene_ensembl")
annotation <- getBM(attributes = c("refseq_peptide_predicted", "refseq_mrna", "ensembl_gene_id", "entrezgene", "go_id", "namespace_1003", "name_1006"),
filters="refseq_peptide_predicted",
values = transcript_proteins$protein_query,
mart = oa_mart)
